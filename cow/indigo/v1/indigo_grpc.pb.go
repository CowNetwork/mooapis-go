// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package indigo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndigoServiceClient is the client API for IndigoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndigoServiceClient interface {
	// Checks if a given user account would succeed the permission
	// check of given permissions. For that the roles and the custom
	// permissions of the user will be used.
	HasPermission(ctx context.Context, in *HasPermissionRequest, opts ...grpc.CallOption) (*HasPermissionResponse, error)
	// List all existing roles.
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	// Gets the role with specific name.
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	// Inserts a new role, if it doesn't exist.
	InsertRole(ctx context.Context, in *InsertRoleRequest, opts ...grpc.CallOption) (*InsertRoleResponse, error)
	// Updates a roles settings (like priority, ...).
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	// Deletes a role if it exists.
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// Add multiple or one permission to given role, if the role exists.
	AddRolePermissions(ctx context.Context, in *AddRolePermissionsRequest, opts ...grpc.CallOption) (*AddRolePermissionsResponse, error)
	// Remove multiple or one permission from given role, if the role exists.
	RemoveRolePermissions(ctx context.Context, in *RemoveRolePermissionsRequest, opts ...grpc.CallOption) (*RemoveRolePermissionsResponse, error)
	// Returns a user by account id.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Get all roles that are bound to given user.
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	// Binds an existing role to the user.
	AddUserRoles(ctx context.Context, in *AddUserRolesRequest, opts ...grpc.CallOption) (*AddUserRolesResponse, error)
	// Unbinds a role from the user.
	RemoveUserRoles(ctx context.Context, in *RemoveUserRolesRequest, opts ...grpc.CallOption) (*RemoveUserRolesResponse, error)
	// Get all custom bound permissions of given user.
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error)
	// Binds custom permissions to given user.
	AddUserPermissions(ctx context.Context, in *AddUserPermissionsRequest, opts ...grpc.CallOption) (*AddUserPermissionsResponse, error)
	// Unbinds custom permissions from given user.
	RemoveUserPermissions(ctx context.Context, in *RemoveUserPermissionsRequest, opts ...grpc.CallOption) (*RemoveUserPermissionsResponse, error)
}

type indigoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndigoServiceClient(cc grpc.ClientConnInterface) IndigoServiceClient {
	return &indigoServiceClient{cc}
}

func (c *indigoServiceClient) HasPermission(ctx context.Context, in *HasPermissionRequest, opts ...grpc.CallOption) (*HasPermissionResponse, error) {
	out := new(HasPermissionResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/HasPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) InsertRole(ctx context.Context, in *InsertRoleRequest, opts ...grpc.CallOption) (*InsertRoleResponse, error) {
	out := new(InsertRoleResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/InsertRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) AddRolePermissions(ctx context.Context, in *AddRolePermissionsRequest, opts ...grpc.CallOption) (*AddRolePermissionsResponse, error) {
	out := new(AddRolePermissionsResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/AddRolePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) RemoveRolePermissions(ctx context.Context, in *RemoveRolePermissionsRequest, opts ...grpc.CallOption) (*RemoveRolePermissionsResponse, error) {
	out := new(RemoveRolePermissionsResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/RemoveRolePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/GetUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) AddUserRoles(ctx context.Context, in *AddUserRolesRequest, opts ...grpc.CallOption) (*AddUserRolesResponse, error) {
	out := new(AddUserRolesResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/AddUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) RemoveUserRoles(ctx context.Context, in *RemoveUserRolesRequest, opts ...grpc.CallOption) (*RemoveUserRolesResponse, error) {
	out := new(RemoveUserRolesResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/RemoveUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error) {
	out := new(GetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/GetUserPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) AddUserPermissions(ctx context.Context, in *AddUserPermissionsRequest, opts ...grpc.CallOption) (*AddUserPermissionsResponse, error) {
	out := new(AddUserPermissionsResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/AddUserPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) RemoveUserPermissions(ctx context.Context, in *RemoveUserPermissionsRequest, opts ...grpc.CallOption) (*RemoveUserPermissionsResponse, error) {
	out := new(RemoveUserPermissionsResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/RemoveUserPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndigoServiceServer is the server API for IndigoService service.
// All implementations should embed UnimplementedIndigoServiceServer
// for forward compatibility
type IndigoServiceServer interface {
	// Checks if a given user account would succeed the permission
	// check of given permissions. For that the roles and the custom
	// permissions of the user will be used.
	HasPermission(context.Context, *HasPermissionRequest) (*HasPermissionResponse, error)
	// List all existing roles.
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	// Gets the role with specific name.
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	// Inserts a new role, if it doesn't exist.
	InsertRole(context.Context, *InsertRoleRequest) (*InsertRoleResponse, error)
	// Updates a roles settings (like priority, ...).
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	// Deletes a role if it exists.
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// Add multiple or one permission to given role, if the role exists.
	AddRolePermissions(context.Context, *AddRolePermissionsRequest) (*AddRolePermissionsResponse, error)
	// Remove multiple or one permission from given role, if the role exists.
	RemoveRolePermissions(context.Context, *RemoveRolePermissionsRequest) (*RemoveRolePermissionsResponse, error)
	// Returns a user by account id.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Get all roles that are bound to given user.
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	// Binds an existing role to the user.
	AddUserRoles(context.Context, *AddUserRolesRequest) (*AddUserRolesResponse, error)
	// Unbinds a role from the user.
	RemoveUserRoles(context.Context, *RemoveUserRolesRequest) (*RemoveUserRolesResponse, error)
	// Get all custom bound permissions of given user.
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error)
	// Binds custom permissions to given user.
	AddUserPermissions(context.Context, *AddUserPermissionsRequest) (*AddUserPermissionsResponse, error)
	// Unbinds custom permissions from given user.
	RemoveUserPermissions(context.Context, *RemoveUserPermissionsRequest) (*RemoveUserPermissionsResponse, error)
}

// UnimplementedIndigoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIndigoServiceServer struct {
}

func (UnimplementedIndigoServiceServer) HasPermission(context.Context, *HasPermissionRequest) (*HasPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPermission not implemented")
}
func (UnimplementedIndigoServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedIndigoServiceServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedIndigoServiceServer) InsertRole(context.Context, *InsertRoleRequest) (*InsertRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRole not implemented")
}
func (UnimplementedIndigoServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedIndigoServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedIndigoServiceServer) AddRolePermissions(context.Context, *AddRolePermissionsRequest) (*AddRolePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolePermissions not implemented")
}
func (UnimplementedIndigoServiceServer) RemoveRolePermissions(context.Context, *RemoveRolePermissionsRequest) (*RemoveRolePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRolePermissions not implemented")
}
func (UnimplementedIndigoServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedIndigoServiceServer) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedIndigoServiceServer) AddUserRoles(context.Context, *AddUserRolesRequest) (*AddUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserRoles not implemented")
}
func (UnimplementedIndigoServiceServer) RemoveUserRoles(context.Context, *RemoveUserRolesRequest) (*RemoveUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserRoles not implemented")
}
func (UnimplementedIndigoServiceServer) GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedIndigoServiceServer) AddUserPermissions(context.Context, *AddUserPermissionsRequest) (*AddUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserPermissions not implemented")
}
func (UnimplementedIndigoServiceServer) RemoveUserPermissions(context.Context, *RemoveUserPermissionsRequest) (*RemoveUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserPermissions not implemented")
}

// UnsafeIndigoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndigoServiceServer will
// result in compilation errors.
type UnsafeIndigoServiceServer interface {
	mustEmbedUnimplementedIndigoServiceServer()
}

func RegisterIndigoServiceServer(s grpc.ServiceRegistrar, srv IndigoServiceServer) {
	s.RegisterService(&IndigoService_ServiceDesc, srv)
}

func _IndigoService_HasPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).HasPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/HasPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).HasPermission(ctx, req.(*HasPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_InsertRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).InsertRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/InsertRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).InsertRole(ctx, req.(*InsertRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_AddRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).AddRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/AddRolePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).AddRolePermissions(ctx, req.(*AddRolePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_RemoveRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRolePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).RemoveRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/RemoveRolePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).RemoveRolePermissions(ctx, req.(*RemoveRolePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/GetUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_AddUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).AddUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/AddUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).AddUserRoles(ctx, req.(*AddUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_RemoveUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).RemoveUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/RemoveUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).RemoveUserRoles(ctx, req.(*RemoveUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/GetUserPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).GetUserPermissions(ctx, req.(*GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_AddUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).AddUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/AddUserPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).AddUserPermissions(ctx, req.(*AddUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_RemoveUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).RemoveUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/RemoveUserPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).RemoveUserPermissions(ctx, req.(*RemoveUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndigoService_ServiceDesc is the grpc.ServiceDesc for IndigoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndigoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cow.indigo.v1.IndigoService",
	HandlerType: (*IndigoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HasPermission",
			Handler:    _IndigoService_HasPermission_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _IndigoService_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _IndigoService_GetRole_Handler,
		},
		{
			MethodName: "InsertRole",
			Handler:    _IndigoService_InsertRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _IndigoService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IndigoService_DeleteRole_Handler,
		},
		{
			MethodName: "AddRolePermissions",
			Handler:    _IndigoService_AddRolePermissions_Handler,
		},
		{
			MethodName: "RemoveRolePermissions",
			Handler:    _IndigoService_RemoveRolePermissions_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _IndigoService_GetUser_Handler,
		},
		{
			MethodName: "GetUserRoles",
			Handler:    _IndigoService_GetUserRoles_Handler,
		},
		{
			MethodName: "AddUserRoles",
			Handler:    _IndigoService_AddUserRoles_Handler,
		},
		{
			MethodName: "RemoveUserRoles",
			Handler:    _IndigoService_RemoveUserRoles_Handler,
		},
		{
			MethodName: "GetUserPermissions",
			Handler:    _IndigoService_GetUserPermissions_Handler,
		},
		{
			MethodName: "AddUserPermissions",
			Handler:    _IndigoService_AddUserPermissions_Handler,
		},
		{
			MethodName: "RemoveUserPermissions",
			Handler:    _IndigoService_RemoveUserPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cow/indigo/v1/indigo.proto",
}
