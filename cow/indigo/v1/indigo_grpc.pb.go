// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package indigo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndigoServiceClient is the client API for IndigoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndigoServiceClient interface {
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	InsertRole(ctx context.Context, in *InsertRoleRequest, opts ...grpc.CallOption) (*InsertRoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	AddRolePermission(ctx context.Context, in *AddRolePermissionRequest, opts ...grpc.CallOption) (*AddRolePermissionResponse, error)
	RemoveRolePermission(ctx context.Context, in *RemoveRolePermissionRequest, opts ...grpc.CallOption) (*RemoveRolePermissionResponse, error)
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	AddUserRole(ctx context.Context, in *AddUserRoleRequest, opts ...grpc.CallOption) (*AddUserRoleResponse, error)
	RemoveUserRole(ctx context.Context, in *RemoveUserRoleRequest, opts ...grpc.CallOption) (*RemoveUserRoleResponse, error)
	AddUserPermission(ctx context.Context, in *AddUserPermissionRequest, opts ...grpc.CallOption) (*AddUserPermissionResponse, error)
	RemoveUserPermission(ctx context.Context, in *RemoveUserPermissionRequest, opts ...grpc.CallOption) (*RemoveUserPermissionResponse, error)
	HasUserPermission(ctx context.Context, in *HasUserPermissionRequest, opts ...grpc.CallOption) (*HasUserPermissionResponse, error)
}

type indigoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndigoServiceClient(cc grpc.ClientConnInterface) IndigoServiceClient {
	return &indigoServiceClient{cc}
}

func (c *indigoServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) InsertRole(ctx context.Context, in *InsertRoleRequest, opts ...grpc.CallOption) (*InsertRoleResponse, error) {
	out := new(InsertRoleResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/InsertRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) AddRolePermission(ctx context.Context, in *AddRolePermissionRequest, opts ...grpc.CallOption) (*AddRolePermissionResponse, error) {
	out := new(AddRolePermissionResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/AddRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) RemoveRolePermission(ctx context.Context, in *RemoveRolePermissionRequest, opts ...grpc.CallOption) (*RemoveRolePermissionResponse, error) {
	out := new(RemoveRolePermissionResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/RemoveRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/GetUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) AddUserRole(ctx context.Context, in *AddUserRoleRequest, opts ...grpc.CallOption) (*AddUserRoleResponse, error) {
	out := new(AddUserRoleResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/AddUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) RemoveUserRole(ctx context.Context, in *RemoveUserRoleRequest, opts ...grpc.CallOption) (*RemoveUserRoleResponse, error) {
	out := new(RemoveUserRoleResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/RemoveUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) AddUserPermission(ctx context.Context, in *AddUserPermissionRequest, opts ...grpc.CallOption) (*AddUserPermissionResponse, error) {
	out := new(AddUserPermissionResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/AddUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) RemoveUserPermission(ctx context.Context, in *RemoveUserPermissionRequest, opts ...grpc.CallOption) (*RemoveUserPermissionResponse, error) {
	out := new(RemoveUserPermissionResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/RemoveUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indigoServiceClient) HasUserPermission(ctx context.Context, in *HasUserPermissionRequest, opts ...grpc.CallOption) (*HasUserPermissionResponse, error) {
	out := new(HasUserPermissionResponse)
	err := c.cc.Invoke(ctx, "/cow.indigo.v1.IndigoService/HasUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndigoServiceServer is the server API for IndigoService service.
// All implementations should embed UnimplementedIndigoServiceServer
// for forward compatibility
type IndigoServiceServer interface {
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	InsertRole(context.Context, *InsertRoleRequest) (*InsertRoleResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	AddRolePermission(context.Context, *AddRolePermissionRequest) (*AddRolePermissionResponse, error)
	RemoveRolePermission(context.Context, *RemoveRolePermissionRequest) (*RemoveRolePermissionResponse, error)
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	AddUserRole(context.Context, *AddUserRoleRequest) (*AddUserRoleResponse, error)
	RemoveUserRole(context.Context, *RemoveUserRoleRequest) (*RemoveUserRoleResponse, error)
	AddUserPermission(context.Context, *AddUserPermissionRequest) (*AddUserPermissionResponse, error)
	RemoveUserPermission(context.Context, *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error)
	HasUserPermission(context.Context, *HasUserPermissionRequest) (*HasUserPermissionResponse, error)
}

// UnimplementedIndigoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIndigoServiceServer struct {
}

func (UnimplementedIndigoServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedIndigoServiceServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedIndigoServiceServer) InsertRole(context.Context, *InsertRoleRequest) (*InsertRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRole not implemented")
}
func (UnimplementedIndigoServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedIndigoServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedIndigoServiceServer) AddRolePermission(context.Context, *AddRolePermissionRequest) (*AddRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolePermission not implemented")
}
func (UnimplementedIndigoServiceServer) RemoveRolePermission(context.Context, *RemoveRolePermissionRequest) (*RemoveRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRolePermission not implemented")
}
func (UnimplementedIndigoServiceServer) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedIndigoServiceServer) AddUserRole(context.Context, *AddUserRoleRequest) (*AddUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserRole not implemented")
}
func (UnimplementedIndigoServiceServer) RemoveUserRole(context.Context, *RemoveUserRoleRequest) (*RemoveUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserRole not implemented")
}
func (UnimplementedIndigoServiceServer) AddUserPermission(context.Context, *AddUserPermissionRequest) (*AddUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserPermission not implemented")
}
func (UnimplementedIndigoServiceServer) RemoveUserPermission(context.Context, *RemoveUserPermissionRequest) (*RemoveUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserPermission not implemented")
}
func (UnimplementedIndigoServiceServer) HasUserPermission(context.Context, *HasUserPermissionRequest) (*HasUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUserPermission not implemented")
}

// UnsafeIndigoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndigoServiceServer will
// result in compilation errors.
type UnsafeIndigoServiceServer interface {
	mustEmbedUnimplementedIndigoServiceServer()
}

func RegisterIndigoServiceServer(s grpc.ServiceRegistrar, srv IndigoServiceServer) {
	s.RegisterService(&IndigoService_ServiceDesc, srv)
}

func _IndigoService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_InsertRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).InsertRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/InsertRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).InsertRole(ctx, req.(*InsertRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_AddRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).AddRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/AddRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).AddRolePermission(ctx, req.(*AddRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_RemoveRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).RemoveRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/RemoveRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).RemoveRolePermission(ctx, req.(*RemoveRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/GetUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_AddUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).AddUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/AddUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).AddUserRole(ctx, req.(*AddUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_RemoveUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).RemoveUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/RemoveUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).RemoveUserRole(ctx, req.(*RemoveUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_AddUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).AddUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/AddUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).AddUserPermission(ctx, req.(*AddUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_RemoveUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).RemoveUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/RemoveUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).RemoveUserPermission(ctx, req.(*RemoveUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndigoService_HasUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndigoServiceServer).HasUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cow.indigo.v1.IndigoService/HasUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndigoServiceServer).HasUserPermission(ctx, req.(*HasUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndigoService_ServiceDesc is the grpc.ServiceDesc for IndigoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndigoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cow.indigo.v1.IndigoService",
	HandlerType: (*IndigoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRoles",
			Handler:    _IndigoService_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _IndigoService_GetRole_Handler,
		},
		{
			MethodName: "InsertRole",
			Handler:    _IndigoService_InsertRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _IndigoService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IndigoService_DeleteRole_Handler,
		},
		{
			MethodName: "AddRolePermission",
			Handler:    _IndigoService_AddRolePermission_Handler,
		},
		{
			MethodName: "RemoveRolePermission",
			Handler:    _IndigoService_RemoveRolePermission_Handler,
		},
		{
			MethodName: "GetUserRoles",
			Handler:    _IndigoService_GetUserRoles_Handler,
		},
		{
			MethodName: "AddUserRole",
			Handler:    _IndigoService_AddUserRole_Handler,
		},
		{
			MethodName: "RemoveUserRole",
			Handler:    _IndigoService_RemoveUserRole_Handler,
		},
		{
			MethodName: "AddUserPermission",
			Handler:    _IndigoService_AddUserPermission_Handler,
		},
		{
			MethodName: "RemoveUserPermission",
			Handler:    _IndigoService_RemoveUserPermission_Handler,
		},
		{
			MethodName: "HasUserPermission",
			Handler:    _IndigoService_HasUserPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cow/indigo/v1/indigo.proto",
}
