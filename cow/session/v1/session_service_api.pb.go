// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.2
// source: cow/session/v1/session_service_api.proto

package session

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Executor_Type int32

const (
	Executor_TYPE_CUSTOM Executor_Type = 0
	Executor_TYPE_USER   Executor_Type = 1
	Executor_TYPE_PLAYER Executor_Type = 2
	Executor_TYPE_SYSTEM Executor_Type = 3
)

// Enum value maps for Executor_Type.
var (
	Executor_Type_name = map[int32]string{
		0: "TYPE_CUSTOM",
		1: "TYPE_USER",
		2: "TYPE_PLAYER",
		3: "TYPE_SYSTEM",
	}
	Executor_Type_value = map[string]int32{
		"TYPE_CUSTOM": 0,
		"TYPE_USER":   1,
		"TYPE_PLAYER": 2,
		"TYPE_SYSTEM": 3,
	}
)

func (x Executor_Type) Enum() *Executor_Type {
	p := new(Executor_Type)
	*p = x
	return p
}

func (x Executor_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Executor_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_cow_session_v1_session_service_api_proto_enumTypes[0].Descriptor()
}

func (Executor_Type) Type() protoreflect.EnumType {
	return &file_cow_session_v1_session_service_api_proto_enumTypes[0]
}

func (x Executor_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Executor_Type.Descriptor instead.
func (Executor_Type) EnumDescriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{37, 0}
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player to create the session for.
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// The ip address the player connects with.
	Ip string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSessionRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *CreateSessionRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session created by this service.
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type GetSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *SessionIdentifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *GetSessionRequest) Reset() {
	*x = GetSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRequest) ProtoMessage() {}

func (x *GetSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{2}
}

func (x *GetSessionRequest) GetIdentifier() *SessionIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

type GetSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested session.
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *GetSessionResponse) Reset() {
	*x = GetSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionResponse) ProtoMessage() {}

func (x *GetSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionResponse.ProtoReflect.Descriptor instead.
func (*GetSessionResponse) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type StopSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *SessionIdentifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// The reason why the session is being stopped.
	//
	// Types that are assignable to Cause:
	//	*StopSessionRequest_Unknown
	//	*StopSessionRequest_Disconnected
	//	*StopSessionRequest_Error
	//	*StopSessionRequest_Custom
	Cause isStopSessionRequest_Cause `protobuf_oneof:"cause"`
}

func (x *StopSessionRequest) Reset() {
	*x = StopSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSessionRequest) ProtoMessage() {}

func (x *StopSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSessionRequest.ProtoReflect.Descriptor instead.
func (*StopSessionRequest) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{4}
}

func (x *StopSessionRequest) GetIdentifier() *SessionIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (m *StopSessionRequest) GetCause() isStopSessionRequest_Cause {
	if m != nil {
		return m.Cause
	}
	return nil
}

func (x *StopSessionRequest) GetUnknown() *StopCauseUnknown {
	if x, ok := x.GetCause().(*StopSessionRequest_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *StopSessionRequest) GetDisconnected() *StopCauseDisconnected {
	if x, ok := x.GetCause().(*StopSessionRequest_Disconnected); ok {
		return x.Disconnected
	}
	return nil
}

func (x *StopSessionRequest) GetError() *StopCauseError {
	if x, ok := x.GetCause().(*StopSessionRequest_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StopSessionRequest) GetCustom() *StopCauseCustom {
	if x, ok := x.GetCause().(*StopSessionRequest_Custom); ok {
		return x.Custom
	}
	return nil
}

type isStopSessionRequest_Cause interface {
	isStopSessionRequest_Cause()
}

type StopSessionRequest_Unknown struct {
	Unknown *StopCauseUnknown `protobuf:"bytes,2,opt,name=unknown,proto3,oneof"`
}

type StopSessionRequest_Disconnected struct {
	Disconnected *StopCauseDisconnected `protobuf:"bytes,3,opt,name=disconnected,proto3,oneof"`
}

type StopSessionRequest_Error struct {
	Error *StopCauseError `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type StopSessionRequest_Custom struct {
	Custom *StopCauseCustom `protobuf:"bytes,5,opt,name=custom,proto3,oneof"`
}

func (*StopSessionRequest_Unknown) isStopSessionRequest_Cause() {}

func (*StopSessionRequest_Disconnected) isStopSessionRequest_Cause() {}

func (*StopSessionRequest_Error) isStopSessionRequest_Cause() {}

func (*StopSessionRequest_Custom) isStopSessionRequest_Cause() {}

type StopSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session that has been stopped (if not already).
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *StopSessionResponse) Reset() {
	*x = StopSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopSessionResponse) ProtoMessage() {}

func (x *StopSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopSessionResponse.ProtoReflect.Descriptor instead.
func (*StopSessionResponse) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{5}
}

func (x *StopSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type KickPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player to kick.
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// The reason for the kick.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// The initiator of the ban.
	Executor *Executor `protobuf:"bytes,3,opt,name=executor,proto3" json:"executor,omitempty"`
}

func (x *KickPlayerRequest) Reset() {
	*x = KickPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickPlayerRequest) ProtoMessage() {}

func (x *KickPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickPlayerRequest.ProtoReflect.Descriptor instead.
func (*KickPlayerRequest) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{6}
}

func (x *KickPlayerRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *KickPlayerRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *KickPlayerRequest) GetExecutor() *Executor {
	if x != nil {
		return x.Executor
	}
	return nil
}

type KickPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resulting kick.
	Kick *Kick `protobuf:"bytes,1,opt,name=kick,proto3" json:"kick,omitempty"`
}

func (x *KickPlayerResponse) Reset() {
	*x = KickPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickPlayerResponse) ProtoMessage() {}

func (x *KickPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickPlayerResponse.ProtoReflect.Descriptor instead.
func (*KickPlayerResponse) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{7}
}

func (x *KickPlayerResponse) GetKick() *Kick {
	if x != nil {
		return x.Kick
	}
	return nil
}

type BanPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player to ban.
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// The reason for the ban.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// The unix timestamp of the ban.
	BannedAt uint64 `protobuf:"varint,3,opt,name=banned_at,json=bannedAt,proto3" json:"banned_at,omitempty"`
	// The duration of this ban in seconds, starting from the banned_at timestamp.
	Duration int64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	// The initiator of the ban.
	Executor *Executor `protobuf:"bytes,5,opt,name=executor,proto3" json:"executor,omitempty"`
}

func (x *BanPlayerRequest) Reset() {
	*x = BanPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanPlayerRequest) ProtoMessage() {}

func (x *BanPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanPlayerRequest.ProtoReflect.Descriptor instead.
func (*BanPlayerRequest) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{8}
}

func (x *BanPlayerRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BanPlayerRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BanPlayerRequest) GetBannedAt() uint64 {
	if x != nil {
		return x.BannedAt
	}
	return 0
}

func (x *BanPlayerRequest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BanPlayerRequest) GetExecutor() *Executor {
	if x != nil {
		return x.Executor
	}
	return nil
}

type BanPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resulting ban.
	Ban *Ban `protobuf:"bytes,1,opt,name=ban,proto3" json:"ban,omitempty"`
}

func (x *BanPlayerResponse) Reset() {
	*x = BanPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanPlayerResponse) ProtoMessage() {}

func (x *BanPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanPlayerResponse.ProtoReflect.Descriptor instead.
func (*BanPlayerResponse) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{9}
}

func (x *BanPlayerResponse) GetBan() *Ban {
	if x != nil {
		return x.Ban
	}
	return nil
}

type GetBansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player to receive ban information for.
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *GetBansRequest) Reset() {
	*x = GetBansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBansRequest) ProtoMessage() {}

func (x *GetBansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBansRequest.ProtoReflect.Descriptor instead.
func (*GetBansRequest) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetBansRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type GetBansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All bans associated to the given player.
	Bans []*Ban `protobuf:"bytes,1,rep,name=bans,proto3" json:"bans,omitempty"`
}

func (x *GetBansResponse) Reset() {
	*x = GetBansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBansResponse) ProtoMessage() {}

func (x *GetBansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBansResponse.ProtoReflect.Descriptor instead.
func (*GetBansResponse) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetBansResponse) GetBans() []*Ban {
	if x != nil {
		return x.Bans
	}
	return nil
}

type RevokeBanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the ban.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The initiator of the ban.
	Executor *Executor `protobuf:"bytes,2,opt,name=executor,proto3" json:"executor,omitempty"`
}

func (x *RevokeBanRequest) Reset() {
	*x = RevokeBanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeBanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeBanRequest) ProtoMessage() {}

func (x *RevokeBanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeBanRequest.ProtoReflect.Descriptor instead.
func (*RevokeBanRequest) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{12}
}

func (x *RevokeBanRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RevokeBanRequest) GetExecutor() *Executor {
	if x != nil {
		return x.Executor
	}
	return nil
}

type RevokeBanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The revoked ban.
	Ban *Ban `protobuf:"bytes,1,opt,name=ban,proto3" json:"ban,omitempty"`
}

func (x *RevokeBanResponse) Reset() {
	*x = RevokeBanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeBanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeBanResponse) ProtoMessage() {}

func (x *RevokeBanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeBanResponse.ProtoReflect.Descriptor instead.
func (*RevokeBanResponse) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{13}
}

func (x *RevokeBanResponse) GetBan() *Ban {
	if x != nil {
		return x.Ban
	}
	return nil
}

type SetMaintenanceModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session types affected by the maintenance mode.
	Types []string `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	// Whether the maintenance mode should be enabled for the given types.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SetMaintenanceModeRequest) Reset() {
	*x = SetMaintenanceModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMaintenanceModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMaintenanceModeRequest) ProtoMessage() {}

func (x *SetMaintenanceModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMaintenanceModeRequest.ProtoReflect.Descriptor instead.
func (*SetMaintenanceModeRequest) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{14}
}

func (x *SetMaintenanceModeRequest) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *SetMaintenanceModeRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SetMaintenanceModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The session types affected by the change.
	Types []string `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *SetMaintenanceModeResponse) Reset() {
	*x = SetMaintenanceModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMaintenanceModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMaintenanceModeResponse) ProtoMessage() {}

func (x *SetMaintenanceModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMaintenanceModeResponse.ProtoReflect.Descriptor instead.
func (*SetMaintenanceModeResponse) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{15}
}

func (x *SetMaintenanceModeResponse) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

type BlacklistPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player to blacklist.
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// The message to show the blacklisted player upon connecting.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BlacklistPlayerRequest) Reset() {
	*x = BlacklistPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistPlayerRequest) ProtoMessage() {}

func (x *BlacklistPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistPlayerRequest.ProtoReflect.Descriptor instead.
func (*BlacklistPlayerRequest) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{16}
}

func (x *BlacklistPlayerRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BlacklistPlayerRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BlacklistPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resulting blacklist entry.
	Entry *BlacklistEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *BlacklistPlayerResponse) Reset() {
	*x = BlacklistPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistPlayerResponse) ProtoMessage() {}

func (x *BlacklistPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistPlayerResponse.ProtoReflect.Descriptor instead.
func (*BlacklistPlayerResponse) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{17}
}

func (x *BlacklistPlayerResponse) GetEntry() *BlacklistEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type RevokeBlacklistPlayerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player to revoke the blacklist for.
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *RevokeBlacklistPlayerRequest) Reset() {
	*x = RevokeBlacklistPlayerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeBlacklistPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeBlacklistPlayerRequest) ProtoMessage() {}

func (x *RevokeBlacklistPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeBlacklistPlayerRequest.ProtoReflect.Descriptor instead.
func (*RevokeBlacklistPlayerRequest) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{18}
}

func (x *RevokeBlacklistPlayerRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type RevokeBlacklistPlayerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The player the blacklist entry has been revoked for.
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
}

func (x *RevokeBlacklistPlayerResponse) Reset() {
	*x = RevokeBlacklistPlayerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevokeBlacklistPlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeBlacklistPlayerResponse) ProtoMessage() {}

func (x *RevokeBlacklistPlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeBlacklistPlayerResponse.ProtoReflect.Descriptor instead.
func (*RevokeBlacklistPlayerResponse) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{19}
}

func (x *RevokeBlacklistPlayerResponse) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of the session.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The player this session belongs to.
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// The current (or last) state of this session.
	//
	// Types that are assignable to State:
	//	*Session_Unknown
	//	*Session_Initialized
	//	*Session_Stopped
	State isSession_State `protobuf_oneof:"state"`
	Ip    string          `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{20}
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Session) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (m *Session) GetState() isSession_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *Session) GetUnknown() *StateUnknown {
	if x, ok := x.GetState().(*Session_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *Session) GetInitialized() *StateInitialized {
	if x, ok := x.GetState().(*Session_Initialized); ok {
		return x.Initialized
	}
	return nil
}

func (x *Session) GetStopped() *StateStopped {
	if x, ok := x.GetState().(*Session_Stopped); ok {
		return x.Stopped
	}
	return nil
}

func (x *Session) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type isSession_State interface {
	isSession_State()
}

type Session_Unknown struct {
	Unknown *StateUnknown `protobuf:"bytes,3,opt,name=unknown,proto3,oneof"`
}

type Session_Initialized struct {
	Initialized *StateInitialized `protobuf:"bytes,4,opt,name=initialized,proto3,oneof"`
}

type Session_Stopped struct {
	Stopped *StateStopped `protobuf:"bytes,5,opt,name=stopped,proto3,oneof"`
}

func (*Session_Unknown) isSession_State() {}

func (*Session_Initialized) isSession_State() {}

func (*Session_Stopped) isSession_State() {}

// The session is in an unknown state.
type StateUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StateUnknown) Reset() {
	*x = StateUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateUnknown) ProtoMessage() {}

func (x *StateUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateUnknown.ProtoReflect.Descriptor instead.
func (*StateUnknown) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{21}
}

// The session has successfully been initialized.
type StateInitialized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StateInitialized) Reset() {
	*x = StateInitialized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateInitialized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateInitialized) ProtoMessage() {}

func (x *StateInitialized) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateInitialized.ProtoReflect.Descriptor instead.
func (*StateInitialized) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{22}
}

// The session has been stopped.
type StateStopped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reason why the session has been stopped.
	//
	// Types that are assignable to Cause:
	//	*StateStopped_Unknown
	//	*StateStopped_Disconnected
	//	*StateStopped_Maintenance
	//	*StateStopped_Error
	//	*StateStopped_Kicked
	//	*StateStopped_Banned
	//	*StateStopped_Blacklisted
	//	*StateStopped_Custom
	Cause isStateStopped_Cause `protobuf_oneof:"cause"`
}

func (x *StateStopped) Reset() {
	*x = StateStopped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateStopped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateStopped) ProtoMessage() {}

func (x *StateStopped) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateStopped.ProtoReflect.Descriptor instead.
func (*StateStopped) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{23}
}

func (m *StateStopped) GetCause() isStateStopped_Cause {
	if m != nil {
		return m.Cause
	}
	return nil
}

func (x *StateStopped) GetUnknown() *StopCauseUnknown {
	if x, ok := x.GetCause().(*StateStopped_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *StateStopped) GetDisconnected() *StopCauseDisconnected {
	if x, ok := x.GetCause().(*StateStopped_Disconnected); ok {
		return x.Disconnected
	}
	return nil
}

func (x *StateStopped) GetMaintenance() *StopCauseMaintenance {
	if x, ok := x.GetCause().(*StateStopped_Maintenance); ok {
		return x.Maintenance
	}
	return nil
}

func (x *StateStopped) GetError() *StopCauseError {
	if x, ok := x.GetCause().(*StateStopped_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StateStopped) GetKicked() *StopCauseKicked {
	if x, ok := x.GetCause().(*StateStopped_Kicked); ok {
		return x.Kicked
	}
	return nil
}

func (x *StateStopped) GetBanned() *StopCauseBanned {
	if x, ok := x.GetCause().(*StateStopped_Banned); ok {
		return x.Banned
	}
	return nil
}

func (x *StateStopped) GetBlacklisted() *StopCauseBlacklisted {
	if x, ok := x.GetCause().(*StateStopped_Blacklisted); ok {
		return x.Blacklisted
	}
	return nil
}

func (x *StateStopped) GetCustom() *StopCauseCustom {
	if x, ok := x.GetCause().(*StateStopped_Custom); ok {
		return x.Custom
	}
	return nil
}

type isStateStopped_Cause interface {
	isStateStopped_Cause()
}

type StateStopped_Unknown struct {
	Unknown *StopCauseUnknown `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type StateStopped_Disconnected struct {
	Disconnected *StopCauseDisconnected `protobuf:"bytes,2,opt,name=disconnected,proto3,oneof"`
}

type StateStopped_Maintenance struct {
	Maintenance *StopCauseMaintenance `protobuf:"bytes,3,opt,name=maintenance,proto3,oneof"`
}

type StateStopped_Error struct {
	Error *StopCauseError `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type StateStopped_Kicked struct {
	Kicked *StopCauseKicked `protobuf:"bytes,5,opt,name=kicked,proto3,oneof"`
}

type StateStopped_Banned struct {
	Banned *StopCauseBanned `protobuf:"bytes,6,opt,name=banned,proto3,oneof"`
}

type StateStopped_Blacklisted struct {
	Blacklisted *StopCauseBlacklisted `protobuf:"bytes,7,opt,name=blacklisted,proto3,oneof"`
}

type StateStopped_Custom struct {
	Custom *StopCauseCustom `protobuf:"bytes,8,opt,name=custom,proto3,oneof"`
}

func (*StateStopped_Unknown) isStateStopped_Cause() {}

func (*StateStopped_Disconnected) isStateStopped_Cause() {}

func (*StateStopped_Maintenance) isStateStopped_Cause() {}

func (*StateStopped_Error) isStateStopped_Cause() {}

func (*StateStopped_Kicked) isStateStopped_Cause() {}

func (*StateStopped_Banned) isStateStopped_Cause() {}

func (*StateStopped_Blacklisted) isStateStopped_Cause() {}

func (*StateStopped_Custom) isStateStopped_Cause() {}

// The session has stopped because of unknown reasons.
type StopCauseUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopCauseUnknown) Reset() {
	*x = StopCauseUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCauseUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCauseUnknown) ProtoMessage() {}

func (x *StopCauseUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCauseUnknown.ProtoReflect.Descriptor instead.
func (*StopCauseUnknown) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{24}
}

// The session stopped because the player disconnected or has been disconnected.
type StopCauseDisconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopCauseDisconnected) Reset() {
	*x = StopCauseDisconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCauseDisconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCauseDisconnected) ProtoMessage() {}

func (x *StopCauseDisconnected) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCauseDisconnected.ProtoReflect.Descriptor instead.
func (*StopCauseDisconnected) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{25}
}

// The session stopped because of maintenance.
type StopCauseMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopCauseMaintenance) Reset() {
	*x = StopCauseMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCauseMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCauseMaintenance) ProtoMessage() {}

func (x *StopCauseMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCauseMaintenance.ProtoReflect.Descriptor instead.
func (*StopCauseMaintenance) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{26}
}

// The session stopped due to an error.
type StopCauseError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StopCauseError) Reset() {
	*x = StopCauseError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCauseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCauseError) ProtoMessage() {}

func (x *StopCauseError) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCauseError.ProtoReflect.Descriptor instead.
func (*StopCauseError) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{27}
}

func (x *StopCauseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// The session stopped because the player has been kicked.
type StopCauseKicked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The underlying kick.
	Kick *Kick `protobuf:"bytes,1,opt,name=kick,proto3" json:"kick,omitempty"`
}

func (x *StopCauseKicked) Reset() {
	*x = StopCauseKicked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCauseKicked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCauseKicked) ProtoMessage() {}

func (x *StopCauseKicked) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCauseKicked.ProtoReflect.Descriptor instead.
func (*StopCauseKicked) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{28}
}

func (x *StopCauseKicked) GetKick() *Kick {
	if x != nil {
		return x.Kick
	}
	return nil
}

// The session stopped because the player is/has been banned.
type StopCauseBanned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The underlying ban.
	Ban *Ban `protobuf:"bytes,1,opt,name=ban,proto3" json:"ban,omitempty"`
}

func (x *StopCauseBanned) Reset() {
	*x = StopCauseBanned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCauseBanned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCauseBanned) ProtoMessage() {}

func (x *StopCauseBanned) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCauseBanned.ProtoReflect.Descriptor instead.
func (*StopCauseBanned) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{29}
}

func (x *StopCauseBanned) GetBan() *Ban {
	if x != nil {
		return x.Ban
	}
	return nil
}

// The session stopped because the player is/has been blacklisted.
type StopCauseBlacklisted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The blacklist entry.
	Entry *BlacklistEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *StopCauseBlacklisted) Reset() {
	*x = StopCauseBlacklisted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCauseBlacklisted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCauseBlacklisted) ProtoMessage() {}

func (x *StopCauseBlacklisted) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCauseBlacklisted.ProtoReflect.Descriptor instead.
func (*StopCauseBlacklisted) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{30}
}

func (x *StopCauseBlacklisted) GetEntry() *BlacklistEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

// The session stopped because of maintenance.
type StopCauseCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StopCauseCustom) Reset() {
	*x = StopCauseCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCauseCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCauseCustom) ProtoMessage() {}

func (x *StopCauseCustom) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCauseCustom.ProtoReflect.Descriptor instead.
func (*StopCauseCustom) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{31}
}

func (x *StopCauseCustom) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Ban struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the ban.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The banned player.
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// The reason of the ban.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// The unix timestamp of the ban.
	BannedAt uint64 `protobuf:"varint,4,opt,name=banned_at,json=bannedAt,proto3" json:"banned_at,omitempty"`
	// The duration of this ban in seconds, starting from the banned_at timestamp.
	Duration int64 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`
	// The initiator of the ban.
	Executor *Executor `protobuf:"bytes,6,opt,name=executor,proto3" json:"executor,omitempty"`
	// The revoke of the ban, if there is one.
	Revoke *BanRevoke `protobuf:"bytes,7,opt,name=revoke,proto3,oneof" json:"revoke,omitempty"`
}

func (x *Ban) Reset() {
	*x = Ban{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ban) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ban) ProtoMessage() {}

func (x *Ban) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ban.ProtoReflect.Descriptor instead.
func (*Ban) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{32}
}

func (x *Ban) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ban) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *Ban) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Ban) GetBannedAt() uint64 {
	if x != nil {
		return x.BannedAt
	}
	return 0
}

func (x *Ban) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Ban) GetExecutor() *Executor {
	if x != nil {
		return x.Executor
	}
	return nil
}

func (x *Ban) GetRevoke() *BanRevoke {
	if x != nil {
		return x.Revoke
	}
	return nil
}

type BanRevoke struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the revoke.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The timestamp of the revoke.
	RevokedAt uint64 `protobuf:"varint,2,opt,name=revoked_at,json=revokedAt,proto3" json:"revoked_at,omitempty"`
	// The initiator of the revoke.
	Executor *Executor `protobuf:"bytes,3,opt,name=executor,proto3" json:"executor,omitempty"`
}

func (x *BanRevoke) Reset() {
	*x = BanRevoke{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanRevoke) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanRevoke) ProtoMessage() {}

func (x *BanRevoke) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanRevoke.ProtoReflect.Descriptor instead.
func (*BanRevoke) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{33}
}

func (x *BanRevoke) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BanRevoke) GetRevokedAt() uint64 {
	if x != nil {
		return x.RevokedAt
	}
	return 0
}

func (x *BanRevoke) GetExecutor() *Executor {
	if x != nil {
		return x.Executor
	}
	return nil
}

type Kick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the kick.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The kicked player.
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// The reason of the ban.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// The unix timestamp of the kick.
	KickedAt uint64 `protobuf:"varint,4,opt,name=kicked_at,json=kickedAt,proto3" json:"kicked_at,omitempty"`
	// The initiator of the kick.
	Executor *Executor `protobuf:"bytes,5,opt,name=executor,proto3" json:"executor,omitempty"`
}

func (x *Kick) Reset() {
	*x = Kick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kick) ProtoMessage() {}

func (x *Kick) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kick.ProtoReflect.Descriptor instead.
func (*Kick) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{34}
}

func (x *Kick) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Kick) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *Kick) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Kick) GetKickedAt() uint64 {
	if x != nil {
		return x.KickedAt
	}
	return 0
}

func (x *Kick) GetExecutor() *Executor {
	if x != nil {
		return x.Executor
	}
	return nil
}

type BlacklistEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the entry.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The blacklisted player.
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	// The message to show the blacklisted player upon connecting.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BlacklistEntry) Reset() {
	*x = BlacklistEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistEntry) ProtoMessage() {}

func (x *BlacklistEntry) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistEntry.ProtoReflect.Descriptor instead.
func (*BlacklistEntry) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{35}
}

func (x *BlacklistEntry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlacklistEntry) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *BlacklistEntry) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SessionIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//	*SessionIdentifier_SessionId
	//	*SessionIdentifier_PlayerId
	Identifier isSessionIdentifier_Identifier `protobuf_oneof:"identifier"`
}

func (x *SessionIdentifier) Reset() {
	*x = SessionIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionIdentifier) ProtoMessage() {}

func (x *SessionIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionIdentifier.ProtoReflect.Descriptor instead.
func (*SessionIdentifier) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{36}
}

func (m *SessionIdentifier) GetIdentifier() isSessionIdentifier_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *SessionIdentifier) GetSessionId() string {
	if x, ok := x.GetIdentifier().(*SessionIdentifier_SessionId); ok {
		return x.SessionId
	}
	return ""
}

func (x *SessionIdentifier) GetPlayerId() string {
	if x, ok := x.GetIdentifier().(*SessionIdentifier_PlayerId); ok {
		return x.PlayerId
	}
	return ""
}

type isSessionIdentifier_Identifier interface {
	isSessionIdentifier_Identifier()
}

type SessionIdentifier_SessionId struct {
	// The id of the session to receive.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3,oneof"`
}

type SessionIdentifier_PlayerId struct {
	// The player to receive the session for.
	PlayerId string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3,oneof"`
}

func (*SessionIdentifier_SessionId) isSessionIdentifier_Identifier() {}

func (*SessionIdentifier_PlayerId) isSessionIdentifier_Identifier() {}

type Executor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the executor.
	Type Executor_Type `protobuf:"varint,1,opt,name=type,proto3,enum=cow.session.v1.Executor_Type" json:"type,omitempty"`
	// The identifier based on the given type.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Executor) Reset() {
	*x = Executor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cow_session_v1_session_service_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Executor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Executor) ProtoMessage() {}

func (x *Executor) ProtoReflect() protoreflect.Message {
	mi := &file_cow_session_v1_session_service_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Executor.ProtoReflect.Descriptor instead.
func (*Executor) Descriptor() ([]byte, []int) {
	return file_cow_session_v1_session_service_api_proto_rawDescGZIP(), []int{37}
}

func (x *Executor) GetType() Executor_Type {
	if x != nil {
		return x.Type
	}
	return Executor_TYPE_CUSTOM
}

func (x *Executor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_cow_session_v1_session_service_api_proto protoreflect.FileDescriptor

var file_cow_session_v1_session_service_api_proto_rawDesc = []byte{
	0x0a, 0x28, 0x63, 0x6f, 0x77, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x6f, 0x77, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0x43, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22,
	0x4a, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x77, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x77,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x02, 0x0a,
	0x12, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x77,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x77, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x22, 0x48, 0x0a,
	0x13, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x11, 0x4b, 0x69, 0x63, 0x6b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x22, 0x3e, 0x0a, 0x12, 0x4b, 0x69, 0x63, 0x6b, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x63,
	0x6b, 0x52, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x6e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x22, 0x3a, 0x0a, 0x11, 0x42, 0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x62, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x52, 0x03, 0x62, 0x61, 0x6e, 0x22, 0x2d, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x6e, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x22, 0x58, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x22, 0x3a, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x62, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x52, 0x03, 0x62, 0x61, 0x6e, 0x22, 0x4b, 0x0a,
	0x19, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x32, 0x0a, 0x1a, 0x53, 0x65,
	0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x4f,
	0x0a, 0x16, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x4f, 0x0a, 0x17, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x77, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x3b, 0x0a, 0x1c, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3c, 0x0a,
	0x1d, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x07,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x44,
	0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x42, 0x07,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x9f, 0x04, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x6b, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x77, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x6b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12,
	0x48, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x77, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x22, 0x12, 0x0a,
	0x10, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x74,
	0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x2a, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b,
	0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x52, 0x04, 0x6b, 0x69, 0x63, 0x6b, 0x22, 0x38, 0x0a, 0x0f, 0x53,
	0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x03, 0x62, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e,
	0x52, 0x03, 0x62, 0x61, 0x6e, 0x22, 0x4c, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0x2b, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xfc, 0x01, 0x0a, 0x03, 0x42, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x06,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x6e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x22,
	0x70, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x22, 0x9e, 0x01, 0x0a, 0x04, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x08,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x22, 0x57, 0x0a, 0x0e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x11, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x97,
	0x01, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x77, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x32, 0xa7, 0x07, 0x0a, 0x0e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x63,
	0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x53, 0x74, 0x6f,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63,
	0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x42,
	0x61, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x77,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x42, 0x61, 0x6e, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x42, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x53,
	0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63,
	0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x63, 0x6f,
	0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x15,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x4c, 0x0a, 0x1e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x63, 0x6f,
	0x77, 0x2e, 0x6d, 0x6f, 0x6f, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x77, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cow_session_v1_session_service_api_proto_rawDescOnce sync.Once
	file_cow_session_v1_session_service_api_proto_rawDescData = file_cow_session_v1_session_service_api_proto_rawDesc
)

func file_cow_session_v1_session_service_api_proto_rawDescGZIP() []byte {
	file_cow_session_v1_session_service_api_proto_rawDescOnce.Do(func() {
		file_cow_session_v1_session_service_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_cow_session_v1_session_service_api_proto_rawDescData)
	})
	return file_cow_session_v1_session_service_api_proto_rawDescData
}

var file_cow_session_v1_session_service_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cow_session_v1_session_service_api_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_cow_session_v1_session_service_api_proto_goTypes = []interface{}{
	(Executor_Type)(0),                    // 0: cow.session.v1.Executor.Type
	(*CreateSessionRequest)(nil),          // 1: cow.session.v1.CreateSessionRequest
	(*CreateSessionResponse)(nil),         // 2: cow.session.v1.CreateSessionResponse
	(*GetSessionRequest)(nil),             // 3: cow.session.v1.GetSessionRequest
	(*GetSessionResponse)(nil),            // 4: cow.session.v1.GetSessionResponse
	(*StopSessionRequest)(nil),            // 5: cow.session.v1.StopSessionRequest
	(*StopSessionResponse)(nil),           // 6: cow.session.v1.StopSessionResponse
	(*KickPlayerRequest)(nil),             // 7: cow.session.v1.KickPlayerRequest
	(*KickPlayerResponse)(nil),            // 8: cow.session.v1.KickPlayerResponse
	(*BanPlayerRequest)(nil),              // 9: cow.session.v1.BanPlayerRequest
	(*BanPlayerResponse)(nil),             // 10: cow.session.v1.BanPlayerResponse
	(*GetBansRequest)(nil),                // 11: cow.session.v1.GetBansRequest
	(*GetBansResponse)(nil),               // 12: cow.session.v1.GetBansResponse
	(*RevokeBanRequest)(nil),              // 13: cow.session.v1.RevokeBanRequest
	(*RevokeBanResponse)(nil),             // 14: cow.session.v1.RevokeBanResponse
	(*SetMaintenanceModeRequest)(nil),     // 15: cow.session.v1.SetMaintenanceModeRequest
	(*SetMaintenanceModeResponse)(nil),    // 16: cow.session.v1.SetMaintenanceModeResponse
	(*BlacklistPlayerRequest)(nil),        // 17: cow.session.v1.BlacklistPlayerRequest
	(*BlacklistPlayerResponse)(nil),       // 18: cow.session.v1.BlacklistPlayerResponse
	(*RevokeBlacklistPlayerRequest)(nil),  // 19: cow.session.v1.RevokeBlacklistPlayerRequest
	(*RevokeBlacklistPlayerResponse)(nil), // 20: cow.session.v1.RevokeBlacklistPlayerResponse
	(*Session)(nil),                       // 21: cow.session.v1.Session
	(*StateUnknown)(nil),                  // 22: cow.session.v1.StateUnknown
	(*StateInitialized)(nil),              // 23: cow.session.v1.StateInitialized
	(*StateStopped)(nil),                  // 24: cow.session.v1.StateStopped
	(*StopCauseUnknown)(nil),              // 25: cow.session.v1.StopCauseUnknown
	(*StopCauseDisconnected)(nil),         // 26: cow.session.v1.StopCauseDisconnected
	(*StopCauseMaintenance)(nil),          // 27: cow.session.v1.StopCauseMaintenance
	(*StopCauseError)(nil),                // 28: cow.session.v1.StopCauseError
	(*StopCauseKicked)(nil),               // 29: cow.session.v1.StopCauseKicked
	(*StopCauseBanned)(nil),               // 30: cow.session.v1.StopCauseBanned
	(*StopCauseBlacklisted)(nil),          // 31: cow.session.v1.StopCauseBlacklisted
	(*StopCauseCustom)(nil),               // 32: cow.session.v1.StopCauseCustom
	(*Ban)(nil),                           // 33: cow.session.v1.Ban
	(*BanRevoke)(nil),                     // 34: cow.session.v1.BanRevoke
	(*Kick)(nil),                          // 35: cow.session.v1.Kick
	(*BlacklistEntry)(nil),                // 36: cow.session.v1.BlacklistEntry
	(*SessionIdentifier)(nil),             // 37: cow.session.v1.SessionIdentifier
	(*Executor)(nil),                      // 38: cow.session.v1.Executor
}
var file_cow_session_v1_session_service_api_proto_depIdxs = []int32{
	21, // 0: cow.session.v1.CreateSessionResponse.session:type_name -> cow.session.v1.Session
	37, // 1: cow.session.v1.GetSessionRequest.identifier:type_name -> cow.session.v1.SessionIdentifier
	21, // 2: cow.session.v1.GetSessionResponse.session:type_name -> cow.session.v1.Session
	37, // 3: cow.session.v1.StopSessionRequest.identifier:type_name -> cow.session.v1.SessionIdentifier
	25, // 4: cow.session.v1.StopSessionRequest.unknown:type_name -> cow.session.v1.StopCauseUnknown
	26, // 5: cow.session.v1.StopSessionRequest.disconnected:type_name -> cow.session.v1.StopCauseDisconnected
	28, // 6: cow.session.v1.StopSessionRequest.error:type_name -> cow.session.v1.StopCauseError
	32, // 7: cow.session.v1.StopSessionRequest.custom:type_name -> cow.session.v1.StopCauseCustom
	21, // 8: cow.session.v1.StopSessionResponse.session:type_name -> cow.session.v1.Session
	38, // 9: cow.session.v1.KickPlayerRequest.executor:type_name -> cow.session.v1.Executor
	35, // 10: cow.session.v1.KickPlayerResponse.kick:type_name -> cow.session.v1.Kick
	38, // 11: cow.session.v1.BanPlayerRequest.executor:type_name -> cow.session.v1.Executor
	33, // 12: cow.session.v1.BanPlayerResponse.ban:type_name -> cow.session.v1.Ban
	33, // 13: cow.session.v1.GetBansResponse.bans:type_name -> cow.session.v1.Ban
	38, // 14: cow.session.v1.RevokeBanRequest.executor:type_name -> cow.session.v1.Executor
	33, // 15: cow.session.v1.RevokeBanResponse.ban:type_name -> cow.session.v1.Ban
	36, // 16: cow.session.v1.BlacklistPlayerResponse.entry:type_name -> cow.session.v1.BlacklistEntry
	22, // 17: cow.session.v1.Session.unknown:type_name -> cow.session.v1.StateUnknown
	23, // 18: cow.session.v1.Session.initialized:type_name -> cow.session.v1.StateInitialized
	24, // 19: cow.session.v1.Session.stopped:type_name -> cow.session.v1.StateStopped
	25, // 20: cow.session.v1.StateStopped.unknown:type_name -> cow.session.v1.StopCauseUnknown
	26, // 21: cow.session.v1.StateStopped.disconnected:type_name -> cow.session.v1.StopCauseDisconnected
	27, // 22: cow.session.v1.StateStopped.maintenance:type_name -> cow.session.v1.StopCauseMaintenance
	28, // 23: cow.session.v1.StateStopped.error:type_name -> cow.session.v1.StopCauseError
	29, // 24: cow.session.v1.StateStopped.kicked:type_name -> cow.session.v1.StopCauseKicked
	30, // 25: cow.session.v1.StateStopped.banned:type_name -> cow.session.v1.StopCauseBanned
	31, // 26: cow.session.v1.StateStopped.blacklisted:type_name -> cow.session.v1.StopCauseBlacklisted
	32, // 27: cow.session.v1.StateStopped.custom:type_name -> cow.session.v1.StopCauseCustom
	35, // 28: cow.session.v1.StopCauseKicked.kick:type_name -> cow.session.v1.Kick
	33, // 29: cow.session.v1.StopCauseBanned.ban:type_name -> cow.session.v1.Ban
	36, // 30: cow.session.v1.StopCauseBlacklisted.entry:type_name -> cow.session.v1.BlacklistEntry
	38, // 31: cow.session.v1.Ban.executor:type_name -> cow.session.v1.Executor
	34, // 32: cow.session.v1.Ban.revoke:type_name -> cow.session.v1.BanRevoke
	38, // 33: cow.session.v1.BanRevoke.executor:type_name -> cow.session.v1.Executor
	38, // 34: cow.session.v1.Kick.executor:type_name -> cow.session.v1.Executor
	0,  // 35: cow.session.v1.Executor.type:type_name -> cow.session.v1.Executor.Type
	1,  // 36: cow.session.v1.SessionService.CreateSession:input_type -> cow.session.v1.CreateSessionRequest
	5,  // 37: cow.session.v1.SessionService.StopSession:input_type -> cow.session.v1.StopSessionRequest
	3,  // 38: cow.session.v1.SessionService.GetSession:input_type -> cow.session.v1.GetSessionRequest
	7,  // 39: cow.session.v1.SessionService.KickPlayer:input_type -> cow.session.v1.KickPlayerRequest
	9,  // 40: cow.session.v1.SessionService.BanPlayer:input_type -> cow.session.v1.BanPlayerRequest
	11, // 41: cow.session.v1.SessionService.GetBans:input_type -> cow.session.v1.GetBansRequest
	13, // 42: cow.session.v1.SessionService.RevokeBan:input_type -> cow.session.v1.RevokeBanRequest
	15, // 43: cow.session.v1.SessionService.SetMaintenanceMode:input_type -> cow.session.v1.SetMaintenanceModeRequest
	17, // 44: cow.session.v1.SessionService.BlacklistPlayer:input_type -> cow.session.v1.BlacklistPlayerRequest
	19, // 45: cow.session.v1.SessionService.RevokeBlacklistPlayer:input_type -> cow.session.v1.RevokeBlacklistPlayerRequest
	2,  // 46: cow.session.v1.SessionService.CreateSession:output_type -> cow.session.v1.CreateSessionResponse
	6,  // 47: cow.session.v1.SessionService.StopSession:output_type -> cow.session.v1.StopSessionResponse
	4,  // 48: cow.session.v1.SessionService.GetSession:output_type -> cow.session.v1.GetSessionResponse
	8,  // 49: cow.session.v1.SessionService.KickPlayer:output_type -> cow.session.v1.KickPlayerResponse
	10, // 50: cow.session.v1.SessionService.BanPlayer:output_type -> cow.session.v1.BanPlayerResponse
	12, // 51: cow.session.v1.SessionService.GetBans:output_type -> cow.session.v1.GetBansResponse
	14, // 52: cow.session.v1.SessionService.RevokeBan:output_type -> cow.session.v1.RevokeBanResponse
	16, // 53: cow.session.v1.SessionService.SetMaintenanceMode:output_type -> cow.session.v1.SetMaintenanceModeResponse
	18, // 54: cow.session.v1.SessionService.BlacklistPlayer:output_type -> cow.session.v1.BlacklistPlayerResponse
	20, // 55: cow.session.v1.SessionService.RevokeBlacklistPlayer:output_type -> cow.session.v1.RevokeBlacklistPlayerResponse
	46, // [46:56] is the sub-list for method output_type
	36, // [36:46] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_cow_session_v1_session_service_api_proto_init() }
func file_cow_session_v1_session_service_api_proto_init() {
	if File_cow_session_v1_session_service_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cow_session_v1_session_service_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeBanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeBanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMaintenanceModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMaintenanceModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeBlacklistPlayerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevokeBlacklistPlayerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateInitialized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateStopped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCauseUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCauseDisconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCauseMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCauseError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCauseKicked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCauseBanned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCauseBlacklisted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCauseCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ban); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanRevoke); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cow_session_v1_session_service_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Executor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cow_session_v1_session_service_api_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*StopSessionRequest_Unknown)(nil),
		(*StopSessionRequest_Disconnected)(nil),
		(*StopSessionRequest_Error)(nil),
		(*StopSessionRequest_Custom)(nil),
	}
	file_cow_session_v1_session_service_api_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Session_Unknown)(nil),
		(*Session_Initialized)(nil),
		(*Session_Stopped)(nil),
	}
	file_cow_session_v1_session_service_api_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*StateStopped_Unknown)(nil),
		(*StateStopped_Disconnected)(nil),
		(*StateStopped_Maintenance)(nil),
		(*StateStopped_Error)(nil),
		(*StateStopped_Kicked)(nil),
		(*StateStopped_Banned)(nil),
		(*StateStopped_Blacklisted)(nil),
		(*StateStopped_Custom)(nil),
	}
	file_cow_session_v1_session_service_api_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_cow_session_v1_session_service_api_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*SessionIdentifier_SessionId)(nil),
		(*SessionIdentifier_PlayerId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cow_session_v1_session_service_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cow_session_v1_session_service_api_proto_goTypes,
		DependencyIndexes: file_cow_session_v1_session_service_api_proto_depIdxs,
		EnumInfos:         file_cow_session_v1_session_service_api_proto_enumTypes,
		MessageInfos:      file_cow_session_v1_session_service_api_proto_msgTypes,
	}.Build()
	File_cow_session_v1_session_service_api_proto = out.File
	file_cow_session_v1_session_service_api_proto_rawDesc = nil
	file_cow_session_v1_session_service_api_proto_goTypes = nil
	file_cow_session_v1_session_service_api_proto_depIdxs = nil
}
